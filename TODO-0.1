TODO

DIRECTORY LAYOUT
    * Theano for the distribution directory
    * Theano/theano for the package
    * Theano/theano has several submodules:
        * gof + compile => core
        * scalar depends upon core
        * tensor depends upon scalar
        * sparse depends upon tensor
        * sandbox can depends on everything else
    * Theano/examples are copy of the example on the wiki.
    * benchmark and examples are in the distribution, not the package
    * Tests are distributed and are part of the package, i.e. fall in the appropriate submodules
    * Documentation scripts go into doc/scripts/
    * Later on, make a .egg / setuptools script (which should suggest changes
    to the directory)
    * Open questions for packaging:
        * Do we want all scripts in bin/, or can they go in doc/scripts ?
BUGS
    * 0.1 bugs in trac

CODE
    * Automatic Op documentation listing
    * Implement RNG
    * Implement state
    * 0.2: Verbose mode for compile.function

    * Klass system

    * Go over sandbox and figure out what is still relevant

    * Make 'merge' optimizer the default (since math optimizer is broken)
        * Update documentation accordingly
    * Rename 'merge' optimizer to 'simple' optimizer (and non-optimizer to
    'null')
        * Update documentation accordingly

EPYDOC
    * Add WRITEME to code
    * Go over and remove all WRITEME
    * Maybe use EPYDOC glossary definitions
        * Fix the term definitions generated to include brief description

TRAC
    * Add a "Rename page" plugin
    * CoreTutorial:
        * In 0.2, rewrite as developer documentation of how theano.function works
        * For the time being, take the basic structure and make a
        "how theano.function works page", to be written, then remove
        CoreTutorial page.
    * When implementation of state is done, CompileFunction should be re-read.
    * Fix timestamp macro
        * Make sure [[Timestamp]] give us the timestamp when the timestamp was added
        * If behavior is different, then remove all instances of Timestamp
    * GraphStructures
        * Needs an introduction.
        * Go over and make sure all documentation is current.
        * Need a short version of the page: What is a Graph, for Users
        * Longer version: Graph documentation, for Developers
    * samples / example code
    * Make sure we have a good sequential list of articles for newbies.
        * Intro 1
            * Simple graph
            * Learn logreg
            * Now, add state
            * Different compilation modes
        * WhatWhyHow, merged with WhatIsTheano
        * Simple tutorial / walkthrough / cookbook
            * Use Tensor always, don't bother with Scalars
        * InstallationNotes
            * Make sure to point out that new Numpy (>=1.1) fixes memory leaks
            (Ticket #146)
        * TerminologyGlossary
        === Maybe the following is more detailed user documentation, but not necessarily for newbies
        * What is a graph?
        * What is an Op?
        * How to Make Tensors
        * IntroToTypes
        * IntroToOps
        * Want a how to guide for writing tests, and documentation of testing
    * GraphOptimization
        Rewrite. (Assigned to Pascal)
    * HowToDebug
    * HowToMakeOps
    * Fix up InstallationNotes page
        * Read over and make sure its up-to-date
        * Describe how to set up PYTHONPATH and suggested directory placement
    * Make a page TipsForSpeed
        * How to enable optimizations
        * How to have the correct BLAS library. [see installation page]
        * [Don't actually write this page, just indicate what should be written.]
    * OpWishList
    * ProposalCCodeGen
    * RandomNumbers
    * TensorVsScalar
        * Also describe about bug #96 how certain types (not float or int)
        won't work with Scalar graphs that are compiled to C.
    * Read over all "polished documentation" and make sure it looks good
    * Home page
        * Make sure that all wiki pages are included in the home page
        * Give a better summary of each wiki page
        * Section
            User docs
            Dev docs
            Proposals + discussions
            Historical proposals + discussion
    * Documentation of Klass system
    * Package 0.1 documentation, so we are free to update it
        * Convert wiki into sphinx or epydoc.

