==============
README: theano
==============

.. contents::


Project Description
===================

Theano is a python library for manipulating and evaluating expressions, especially matrix-valued ones.
What does Theano do that Python and numpy do not?

- *execution speed optimizations*: Theano can use `g++` to compile parts your expression graph into native machine code, which runs much faster than python.

- *symbolic differentiation*: Theano can convert a symbolic graph build symbolic graphs for computing gradients.

- *stability optimizations*: Theano can recognize numerically unstable expressions and compute them with more stable algorithms.


Here's a very simple example of how to use Theano.  It doesn't show off many of Theano's features, but it illustrates concretely what Theano is.

.. code-block:: python

    import theano
    from theano import tensor

    a = tensor.fscalar()            # declare a symbolic floating-point scalar.
    b = tensor.fscalar()            # declare a symbolic floating-point scalar.

    c = a + b                       # create a simple expression

    f = theano.function([a,b], [c]) # convert the expression into a callable object 
                                    # that takes (a,b) values as input and computes a value for c

    assert 4.0 == f(1.5, 2.5)       # bind 1.5 to 'a', 2.5 to 'b', and evaluate 'c'

Theano is not a programming language in the normal sense because you write a program in Python that builds expressions for Theano.  Still it is like a programming language in the sense that to use theano, you have to 

- declare variables ({{{a,b}}}) and give their types

- build expressions for how to put those variables together

- compile expression graphs to functions in order to use them for computation.

It is good to think of `theano.function` as the interface to a compiler which builds a callable object from a purely symbolic graph.


License
-------

Theano is licensed under a BSD-like license.  See the LICENSE file in the project root folder.


Installation
============

(See also the :wiki:`InstallationNotes` on the wiki.)


Software Requirements
---------------------

- linux or OS-X operating system

- python 2.5

- SciPy (specifically numpy, sparse, weave).  Numpy version >= 1.1 fixes memory leak. Numpy version >=1.2 fixes more memory leak.

- docutils, pygments (optional, to build documentation)

- mercurial (optional, to download the source)

- g++, python-dev (optional, to compile generated C code)

- nose, for testing

-  `psyco <http://psyco.sourceforge.net/>`__ can make your python code much faster, if you are on a 32-bit x86 architecture.  If you use compiled C code, this can be less important.

Downloading Theano
------------------

There are two ways to get the source: mercurial (required for library developers) and unix tar.
There are no stable releases yet.

*To get the source via mercurial,* you must have `mercurial <http://www.selenic.com/mercurial/wiki/>`__ installed.

Get the source and run the tests like this:

.. code-block:: bash
    
    hg clone http://pylearn.org/hg/theano theano
    cd theano
    nosetests

To update your library to the latest on pylearn.org, change directory (`cd`) to this `theano` folder and type

.. code-block:: bash

    hg pull -u

*To get the source via unix tar*, you can download the latest source directly as a gzip'd tar file:
`<http://pylearn.org/hg/theano/archive/tip.tar.gz>`__.

Two environment variables are used to control automatic code generation.
(It is possible to use theano in a way that avoids all automatic code generation, but the functions you make using {{{theano.function}}} will execute more slowly.)

- `THEANO_BLAS_LDFLAGS`: 
    a space-separated list of library names to link against for BLAS functions. Default: `-lblas`

- `THEANO_COMPILEDIR`:
    a directory with read/write access permissions, where theano will store
    autogenerated code and c modules.  Default: `$HOME/.theano`.  If this
    directory does not exist, or does not have the correct permissions, then
    theano will try to create it with the correct permissions.  If that fails,
    an exception will be raised and no C code will be compiled.

Setup on Linux
++++++++++++++


Setup on OS-X
+++++++++++++

- Install [http://www.macports.org/ MacPorts]

- `sudo port install gcc42 py25-zlib py25-numpy py25-scipy mercurial`.
    Note that compiling gcc42 takes a significant time (hours) so it's probably
    not the best solution if you're in a rush! In my (Doomie) experience, scipy
    failed to compile the first time I tried the command, but the second time
    it compiled just fine. Same thing with py25-zlib.


- Install some kind of BLAS library (TODO: how?)

- Set THEANO_BLAS_LDFLAGS to something which will link against said BLAS
  library.  (e.g., `THEANO_BLAS_LDFLAGS='-lcblas -latlas -lgfortran'`).



Setup on Windows
++++++++++++++++

No one has done this yet. WRITEME.


Tips for running at LISA
++++++++++++++++++++++++

Use the fast BLAS library that Fred installed, by setting
`THEANO_BLAS_LDFLAGS=-lgoto`.

Tips for running on a cluster
+++++++++++++++++++++++++++++

Use something like the following in your .bashrc:

.. code-block:: bash

    #use the intel math-kernel library for BLAS routines
    THEANO_BLAS_LDFLAGS=-lmkl

    # use up to two threads in the MKL routines
    OMP_NUM_THREADS=2

    # IMPORTANT!
    # Use the local-temporary directory as a cache.
    # If several jobs start simultaneously and use a common
    # cache, then the cache may be corrupted.
    # Theano is not process-safe or thread-safe in this sense.
    THEANO_COMPILEDIR=/ltmp/<username>_theano


Running the Test Suite
======================

Test your installation by running the tests.  Type at the shell:

.. code-block:: bash

    cd theano
    nosetests

All tests should pass.

python-nose must be installed. On red-hat or fedora core: sudo yum install python-nose.noarch


Using Theano
============

Now that you've got theano installed and running, check out the `n00b tutorial <doc/n00b.html>`__ for how to use it.


Getting Help
============

If these installation instructions don't work, search the theano-users archive for similar cases.  If you don't find a solution, write to theano-users and explain the situation.


.. _README: README.html
.. _Download: README.html#downloading-theano
.. _Documentation: doc/index.html
.. _Wiki: http://pylearn.org/theano
.. _task list: http://lgcm.iro.umontreal.ca/theano/query?status=accepted&status=assigned&status=new&status=reopened&group=milestone&max=200&col=id&col=summary&col=status&col=owner&col=type&col=priority&col=component&col=time&report=9&order=priority

