
.. _install:


Installing Theano
=================

.. note::
    If you are a member of LISA Labo, have a look at :ref:`lisa_labo` for
    lab-specific installation instructions.


Requirements
------------

In order to use Theano, the following libraries and software will need
to be installed:

    Linux or OS-X operating system
        We develop mainly on 64-bit Linux machines. 32-bit architectures are
        not well-tested.

    python >= 2.5

    `numpy <http://numpy.scipy.org/>`_ >= 1.2
        Earlier versions have memory leaks.
    `SciPy <http://scipy.org>`_
        Specifically numpy, sparse, and weave. We recommend scipy
        >=0.7 if you are using sparse matrices, because scipy.sparse
        is buggy in 0.6. (scipy.csc_matrix dot has a bug with singleton
        dimensions. There may be more bugs.)

The following libraries and software are optional:

    g++, python-dev
        Highly recommended, to compile generated C code.
    `nose <http://somethingaboutorange.com/mrl/projects/nose/>`_
        Recommended, to run Theano's test-suite.
    `sphinx <http://sphinx.pocoo.org/>`_ >=0.5.1, `pygments <http://pygments.org/>`_
        Used to build documentation. latex and dvipng
        are also necessary for math to show up as images.
    `mercurial <http://www.selenic.com/mercurial/>`_
        To download bleeding-edge 


Easy install
------------

The following command will install the latest release of Theano
on your system:

.. code-block:: bash

    easy_install Theano

Manual install
--------------

To install the latest release of Theano from source, visit the `downloads
<http://pylearn.org/theano/downloads/>` page and download the release you
want. Unpack the release, and type:

.. code-block:: bash

    python setup.py build
    python setup.py test
    python setup.py install


Bleeding Edge
--------------

Feeling lucky and want to run bleeding-edge code?
Then check out the :ref:`dev_start_guide` guide.

I bet you also run with scissors.

Configuring the environment
---------------------------

Two environment variables are used to control automatic code
generation. It is possible to use theano in a way which avoids all
automatic code generation, but that way is much, much slower.

- `THEANO_BLAS_LDFLAGS`:
    A space-separated list of options (flags) that will be passed to the
    compiler. It should include library names to link against for BLAS
    functions. Default: ``-lblas``.

- `THEANO_COMPILEDIR`:
    A directory with read/write access permissions where theano will store
    autogenerated code and C modules. Default:
    ``$HOME/.theano/compiledir_xxx`` where ``xxx`` is a platform identifier.
    If this
    directory does not exist or does not have the correct permissions,
    theano will try to create it with the correct permissions. If that fails,
    an exception will be raised and no C code will be compiled.

- `THEANO_DEFAULT_MODE`:
    String value specifying the default mode to use when compiling theano
    graphs. This can be one of the strings defined in
    :api:`theano.compile.mode`.
    Possible values so far are:

    - 'FAST_COMPILE'
    - 'FAST_RUN'
    - 'DEBUG_MODE'

    Omitting this variable defaults the mode to 'FAST_RUN'.

Mac
---

- Install `MacPorts <http://www.macports.org/>`__.

-
    .. code-block:: bash

        $ sudo port install gcc42 py25-zlib py25-numpy py25-scipy mercurial

    Note that compiling gcc42 takes a significant time (hours) so it is probably
    not the best solution if you are in a rush! It may happen that SciPy
    fails to compile the first time and still compiles just fine on a second
    try. Same thing with py25-zlib.

- Install some kind of BLAS library (TODO: how?)

- Set THEANO_BLAS_LDFLAGS to something which will link against said BLAS
  library.  E.g., `THEANO_BLAS_LDFLAGS='-lcblas -latlas -lgfortran'`.

This advice has not been tested recently, so please inform us of your results.



Windows
-------

As of now, the Windows platform is not supported. In fact, it has
never even been tested, so feel free to explore this uncharted
territory and inform us of your progress!


Generating the documentation
----------------------------

You can read the latest HTML documentation `here
<http://pylearn.org/theano/contents.html>`_.
You can download the latest PDF documentation `here
<http://pylearn.org/theano/theano.pdf`_.

We recommend you look at the documentation on the website, since it
will be more current than the documentation included with the package.

If you really wish to build the documentation yourself, you will need
epydoc and sphinx, as described above. Issue the following command::

    python ./doc/scripts/docgen.py

Documentation is built into ``html/``.
The PDF of the documentation is ``html/theano.pdf``.


.. _theano-users: http://groups.google.com/group/theano-users?pli=1
