
.. _debugmode:

===============
Using DebugMode
===============


The DebugMode evaluation mode (available via ``mode='DEBUG_MODE'``,
:api:`DebugMode`) includes a number of self-checks and assertions that
can help to diagnose several kinds of programmer errors that can lead
to incorrect output.

It is much slower to evaluate a function or method in DEBUG_MODE than
it would be in FAST_RUN or even FAST_COMPILE. We recommended you use
DebugMode during development, but not when you launch 1000 processes on
a cluster.

DebugMode is used as follows:

.. code-block:: python

    x = theano.dvector('x')

    f = theano.function(x, 10*x, mode='DEBUG_MODE')

    f(5) 
    f(0) 
    f(7) 


If any problem is detected, DebugMode will raise an exception according to
what went wrong, either at call time (e.g. ``f(5)``) or compile time (e.g
``f = theano.function(x, 10*x, mode='DEBUG_MODE')``). These exceptions
should *not* be ignored; talk to your local Theano guru or email the
users list if you cannot make the exception go away.

Some kinds of errors can only be detected for certain input value combinations.
In the example above, there is no way to guarantee that a future call to say,
``f(-1)`` won't cause a problem.  DebugMode is not a silver bullet.

There following are DebugMode exceptions you might encounter:

BadCLinkerOutput
----------------

This exception means that python (``perform``) and c (``c_code``) for an Op
didn't compute the same thing like they were supposed to.
The problem might be a bug in either ``perform`` or ``c_code`` (or both).

For detailed documentation see :api:`BadCLinkerOutput`.


BadOptimization
---------------

This exception indicates that an Optimization replaced one variable (say V1)
with another one (say V2)  but at runtime, the values for V1 and V2 were
different.  This is something that optimizations are not supposed to do.

It can be tricky to identify the one-true-cause of an optimization error, but
this exception provides a lot of guidance.  Most of the time, the
exception object will indicate which optimization was at fault.
The exception object also contains information such as a snapshot of the
before/after graph where the optimization introduced the error.

For detailed documentation see :api:`BadOptimization`.


BadDestroyMap
-------------

This happens when an Op's ``perform()`` or ``c_code()`` modifies an input that it wasn't
supposed to.  If either the ``perform`` or ``c_code`` implementation of an Op
might modify any input, it has to advertise that fact via the ``destroy_map``
attribute.

For detailed documentation on the Exception, see :api:`BadDestroyMap`.

For detailed documentation on the ``destroy_map`` attribute, see :ref:`inplace`.


BadViewMap
----------

This happens when an Op's perform() or c_code() creates an alias or alias-like
dependency between an input and an output... and it didn't warn the
optimization system via the ``view_map`` attribute.

For detailed documentation on the Exception, see :api:`BadViewMap`.

For detailed documentation on the ``view_map`` attribute, see :ref:`views`.


StochasticOrder
---------------

This happens when an optimization does not perform the same graph operations
in the same order when run several times in a row.  This can happen if any
steps are ordered by ``id(object)`` somehow, such as via the default object
hash function.  A Stochastic optimization invalidates the pattern of work
whereby we debug in DEBUG_MODE and then run the full-size jobs in FAST_RUN.

For detailed documentation see :api:`StochasticOrder`.


FloatError
----------

This happens when invalid floating-point values such as NaN and Inf are
introduced into the computations.  It indicates which Op created the first
NaN.

Currently this exception is never raised because the check is not being
performed, but the plan is that it will be.  (see ticket #320)

For detailed documentation see :api:`FloatError`.

InvalidValueError
-----------------

This happens when some Op's ``perform`` or ``c_code`` implementation computes
an output that is invalid with respect to the type of the corresponding output
variable.  Like if it returned a complex-valued ndarray for a ``dscalar``
Type.

For detailed documentation see :api:`InvalidValueError`.

DebugModeError
--------------

This is a generic error, pretty unhelpful.  You'll generally have to look at the
stack trace and then in the code to figure out why DebugMode is complaining.

For detailed documentation see :api:`DebugModeError`.

